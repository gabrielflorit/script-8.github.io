- title: Game loop
  dl:
    - - initialState
      - Assign your game's initial state to this. It must be a serializable object, e.g. don't put a function in there. After setting it once, do not modify it directly unless you want unpredictable behavior. Instead, mutate `state` in `update` (see below).
    - - update(state, input, elapsed)
      - "This function is called before `draw`. `state` is your game's state. Mutate state here. Note that you should not assign a new variable to `state`. Instead, assign individual properties. For example, don't do this: `state = { lives: 0}`. Do this: `state.lives = 0`. `elapsed` is time passed since last `update` call. See below for an explanation of `input`."
    - - drawActors(state)
      - Draws `actors` in `initialState`. Internally this function calls `sprite` per actor. So make sure your actors each have at least `x`, `y`, and `sprite` properties.
    - - draw(state)
      - This function is called after `draw`. `state` is your game's state.
- title: Input
  dl:
    - - ''
      - "The `update` function receives `input` as its second parameter. It's an object of booleans representing user input: up, right, down, left, a, b, start, and select. On keyboards, the last two represent Enter and Space, respectively. There are several input variations:"
    - - '<button>'
      - "Whether a button is currently held down (or not). For example, if you're holding right and up, `input` will have the following properties: `{ right: true, up: true }`."
    - - '<buttonPressed>'
      - 'Whether a button is pressed on the current frame but not on the previous frame. For example, if you pressed `up` in the current frame, `input` will have the following property: `{ upPressed: true }`.'
    - - '<buttonReleased>'
      - 'Whether a button is not pressed on the current frame but was pressed on the previous frame.'
- title: Draw
  note: non-integers are rounded down
  dl:
    - - print(x, y, text, [color=0])
      - Draws `text` at xy.
    - - getPixel(x, y)
      - Returns the current color of the pixel xy.
    - - setPixel(x, y, [color=0])
      - Sets the color of the pixel xy.
    - - line(x1, y1, x2, y2, [color=0])
      - Draws line from x1y1 to x2y2.
    - - rectStroke(x, y, width, height, [color=0])
      - Strokes a rectangle at xy.
    - - rectFill(x, y, width, height, [color=0])
      - Fills a rectangle at xy.
    - - circStroke(x, y, radius, [color=0])
      - Strokes a circle at xy.
    - - circFill(x, y, radius, [color=0])
      - Fills a circle at xy.
    - - polyStroke(points, [rotate, [x, y]], color)
      - 'Strokes a polygon as defined by an array of points, each point being a two-element array. You do not need to close the polygon. For example, to draw a square at 0,0: `polyStroke([[0,0], [4,0], [4,4], [0, 4]], 0)`. `rotate` is in degrees. If `rotate` is supplied, but no xy, rotates the polygon. If `rotate` and `xy` is supplied, rotates the polygon about xy. Note color is not optional.'
    - - sprite(x, y, sprite, [brighten, flipH, flipV])
      - Draws the sprite at xy. `sprite` is an integer between 0 and 127. The optional integer `brighten` will draw the sprite's pixels brighter by the specified amount. Negative values darken the sprite. If `flipH` is true, mirrors the sprite along the y axis, and if `flipV` is true, mirrors the sprite along the x axis.
    - - clear([c])
      - Clears the screen. Optionally pass in a color to draw the entire screen with that color.
    - - getTile(mx, my)
      - If found, returns the sprite at this location. `mx` and `my` are in map coordinates. The result is an array, with a `type` property indicating the sprite type (0-1-2-3).
    - - setTile(mx, my, spriteNumber)
      - Sets the sprite on the map. `mx` and `my` are in map coordinates.
    - - map([mx=0, my=0])
      - Draws the map. `mx` and `my` are in map coordinates, e.g. mx=1, my=1 is the top-left map tile.
    - - resetMap()
      - Resets the map. Useful when you've called `setTile`.
    - - camera([x=0, y=0])
      - Offsets the top-left corner from subsequent draw coordinates. Call `camera()` to reset it.
- title: Utility
  dl:
    - - range([start=0], end, [step=1])
      - Creates an array of numbers from `start` up to `end`, not inclusive. <a class='text' href='https://lodash.com/docs/4.17.11#range'>By Lodash</a>.
    - - flatten(array)
      - Flattens `array` a single level deep. <a class='text' href='https://lodash.com/docs/4.17.11#flatten'>By Lodash</a>.
    - - random([lower=0], [upper=1])
      - Returns a random number between `lower` and `upper`. <a class='text' href='https://lodash.com/docs/4.17.11#random'>By Lodash</a>.
    - - clamp(number, [lower], upper)
      - Clamps `number` between inclusive `lower` and `upper`. <a class='text' href='https://lodash.com/docs/4.17.11#clamp'>By Lodash</a>.
    - - log(message)
      - Prints `message` to the preview window.
    - - new StateMachine({ init, transitions })
      - Creates a state machine. By <a href='https://github.com/jakesgordon/javascript-state-machine'>Jake Gordon</a>. Consult its documentation.
- title: Sound (not stable)
  dl:
    - - playPhrase(phrase)
      - docs coming
    - - playSong(song, [loop=false])
      - docs coming
    - - stopSong()
      - docs coming
